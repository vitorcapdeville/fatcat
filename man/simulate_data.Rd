% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_data.R
\name{simulate_data}
\alias{simulate_data}
\title{Simulate data from a factor model for categorical ordinal data.}
\usage{
simulate_data(
  beta,
  sigma,
  alpha,
  n = NULL,
  f = NULL,
  link = c("probit", "logit")
)
}
\arguments{
\item{beta}{A matrix with dimension j x q, where j is the number of variables and q the number of latent factors.}

\item{sigma}{A vector with the elements of the diagonal of the matrix of variances, with j elements.}

\item{alpha}{A matrix of dimension j x (k+1).}

\item{n}{The number of observations to be simulated. Should only be provided if `f` is not provided.}

\item{f}{A matrix of dimension p x n. Should only be provided if `n` is not provided.}

\item{link}{The link function to be used, either "probit" or "logit".}
}
\value{
A matrix with dimension j x n, with the simulated data.
}
\description{
The simulated data follows the model:
}
\details{
y_i|f_i = beta f_i + epsilon_i
f_i ~ N(0, I_q)

where:
y_i is a vector of dimension j
beta is a matrix of dimension j x q
f_i is a vector of dimension q
epsilon_i is a vector of dimension j
q is the number of factors
j is the number of variables

The output of the simulation is y_i^*, which is a categorization of y_i.
y_ij^* = k if alpha_{k-1} <= y_ij <= alpha_k
The number of categories is fixed at k. There are k + 1 cutoff points,
and usually the first cutoff point is -infty and the last one is +infty

The model can also be written as:

y = beta beta' + Sigma

which is known as the marginal model.

The second form of the model can be simulated from by providing `n` instead of `f`.
For now, simulating from the marignal model is compatible only with the probit link function.
}
\examples{
j <- 5
n <- 300
k <- 4
true_p <- 2

true_beta <- matrix(
  c(
    0.99, 0,
    0, 0.99,
    0.90, 0,
    0, 0.90,
    0.5, 0.5
  ),
  nrow = j, ncol = true_p,
  byrow = TRUE
)

true_sigma <- c(0.01, 0.05, 0.10, 0.15, 0.20)

true_alpha <- matrix(
  c(-Inf, qnorm(0.4), qnorm(0.75), qnorm(0.9), Inf),
  nrow = j, ncol = (k + 1),
  byrow = TRUE
)

true_f <- t(
  MASS::mvrnorm(n, rep(0, true_p), diag(1, true_p, true_p))
)
y <- simulate_data(
  beta = true_beta,
  sigma = true_sigma,
  alpha = true_alpha,
  f = true_f,
  link = "probit"
)

y_marginal <- simulate_data(
  beta = true_beta,
  sigma = true_sigma,
  alpha = true_alpha,
  n = n,
  link = "probit"
)

}
